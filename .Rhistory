library(rodbc)
library(RODBC)
install.packages("RODBC")
rs <- odbcConnect(dsn = "asterJoel", uid = "beehive", pwd = "beehive")
rs <- odbcConnect(dsn = "asterJoel", uid = "beehive", pwd = "beehive")
library(RODBC)
rs <- odbcConnect(dsn = "asterJoel", uid = "beehive", pwd = "beehive")
rs <- odbcConnect(dsn = "Aster", uid = "beehive", pwd = "beehive")
rs <- odbcConnect(dsn = "Aster", uid = "beehive", pwd = "beehive")
library(ODBC)
library(RODBC)
rs <- odbcConnect(dsn = "Aster", uid = "beehive", pwd = "beehive")
rs <- odbcConnect(dsn = "Aster", uid = "beehive", pwd = "beehive")
fix(rs)
fix(rs)
fix(rs)
rsdata <- sqlQuery(rs, "select rpm_avg from hdrnd.sensor_fleet_yf_spain_summury limit 100", errors=TRUE)
View(rsdata)
rsseries <- ts(rsdata, start=c(1866))
plot.ts(rsseries)
rsseriesforecasts$sse
rsseriesforecasts <- HoltWinters(rsseries, gamma=FALSE)
rsseriesforecasts$SSE
plot(rsseriesforcasts)
plot(rsseriesforecasts)
rsseriesforecasts
rsseriesforecasts$SSE
rsseriesforecasts$SSE
rsseriesforecasts
library(RODBC)
install.packages("RODBC")
install.packages("RODBC")
help(library)
savehistory("C:/Users/JL186064/Desktop/r_aster_sample.Rhistory")
getwd
getwd()
setwd("C:/Teradata/04.study/Data Scientist/Coursera/R_Programming/work")
source("pollutantmean")
source("pollutantmean.R")
x<- data.frame(1,2)
x
mean(x)
mean(x$x1)
attribute(x)
attributes(x)
class(x)
class(x$x1)
class(x$x2)
x
mean(x$x1)
?mean
pollutantmean("specdata", "sulfate", 1:10)
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
csv = read.csv(specdata/001.csv)
csv = read.csv("specdata/001.csv")
csv
csv$sulfate
pollutant <- "sulfate"
csv$pollutant
csv$[[pollutant]]
myData<- data.frame(0)
names(myData) <- pollutant
myData
x
y <- data.frame(a=1,b=2)
rbind(x,y)
sulfate <- csv$sulfate
sulfate
good <- complete.cases(sulfate)
good
sulfate[good]
myData <- rbind(myData, sulfate[good])
mydata
myData
sulfate[good]
sulfate[good][]
sulfate[good][,]
sulfate[good][]
sulfate[good]
sulfate[good,]
sulfate[good,1]
sulfate[good][2]
sulfate[good][2][3]
sulfate[good]
rbind(myData, sulface[good])
rbind(myData, sulfate[good])
myData[3]
myData[2]
myData[sulfate]
myData$sulfate
summary(myData)
mean(myData$sulfate)
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
myData<- data.frame(0)
names(myData) <- pollutant
myData
sulfate <- data.frame(sulfate=1:6)
sulfate
myData <- rbind(myData, sulfate[good])
myData <- rbind(myData, sulfate)
myData
mean(myData$sulfate)
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
cube <- function(x, n) {
x^3
}
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
?sprintf
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
print(myData$sulfate)
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
csv = read.csv(specdata/001.csv)
csv = read.csv("specdata/001.csv")
csv
head(csv)
csv[,sulfate]
csv[,
"sulfate]
:
.
w
}
csv
csv[,"sulfate"]
csv[,sulfate]
csv["sulfate"]
csv[,"sulfate"]
csv[,,"sulfate"]
csv[,"sulfate"]
csv["sulfate"]
csv[,]
csv[]
csv[,"id"]
csv[,"Id"]
csv[,"ID"]
csv[
"ID"]
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
source("pollutantmean.R")
complete("specdata", 30:25)
source("complete.R")
complete("specdata", 3)
?head
?cor
?var
source("complete.R")
complete("specdata", 1)
result[,1]
source("complete.R")
complete("specdata", 1)
source("complete.R")
complete("specdata", 1)
source("complete.R")
complete("specdata", 1)
source("complete.R")
complete("specdata", 1)
source("complete.R")
complete("specdata", 1)
source("complete.R")
complete("specdata", 1)
complete("specdata", c(2, 4, 8, 10, 12))
setwd('~')
getwd()
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
getwd()
setwd("c:\\Teradata\\04.study\\Data Scientist\\Coursera\\R_Programming\\work\\")
getwd()
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
source("complete.R")
complete("specdata", 1)
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean("specdata", "nitrate", 70:72)
source("complete.R")
source("corr.R")
source("corr.R")
source("corr.R")
source("corr.R")
source("complete.R")
source("corr.R")
source("complete.R")
source("corr.R")
cr <- corr("specdata", 150)
head(cr)
summary(cr)
cr <- corr("specdata", 400)
head(cr)
summary(cr)
cr <- corr("specdata", 5000)
summary(cr)
summary(cr)
length(cr)
cr <- corr("specdata")
summary(cr)
length(cr)
cr
source("complete.R")
## source("corr.R")
cr <- corr("specdata", 150)
head(cr)
source("summit.R")
source("summit.R")
source("summit.R")
source("summit.R")
source("summit.R")
source("summit.R")
source("summit.R")
source("summit.R")
getwd()
x <- matrix(1:4, 2, 2)
x
y <- solve(x)
y
makeCacheMatrix <- function(x = matrix()) {
s <- NULL
set <- function(y) {
x <<- y
s <<- NULL
}
get <- function() x
setsolve <- function(solve) s <<- solve
getsolve <- function() s
list(set = set, get = get,
setsolve = setsolve,
getsolve = getsolve)
}
## This function computes the inverse of the special "matrix" returned by makeCacheMatrix above.
cacheSolve <- function(x, ...) {
s <- x$getsolve()
if(!is.null(s)) {
message("getting cached data")
return(s)
}
data <- x$get()
s <- solve(data, ...)
x$setsolve(s)
## Return a matrix that is the inverse of 'x'
s
}
makeCacheMatrix <- function(x = matrix()) {
s <- NULL
set <- function(y) {
x <<- y
s <<- NULL
}
get <- function() x
setsolve <- function(solve) s <<- solve
getsolve <- function() s
list(set = set, get = get,
setsolve = setsolve,
getsolve = getsolve)
}
cacheSolve <- function(x, ...) {
s <- x$getsolve()
if(!is.null(s)) {
message("getting cached data")
return(s)
}
data <- x$get()
s <- solve(data, ...)
x$setsolve(s)
## Return a matrix that is the inverse of 'x'
s
}
makeCacheMatrix(x)
x$set(1:4,2,2)
x$set(maxtrix(1:4,2,2)
)
x$set(matrix(1:4,2,2)
)
x$set(y<-matrix(1:4,2,2))
setwd("~/GitHub/ProgrammingAssignment2")
source(cachematrix.R)
source("cachematrix.R")
makeCacheMatrix(x)
makeCacheMatrix$set(1:4,2,2)
makeCacheMatrix$set(matrix(1:4,2,2))
y<-matrix(1:4,2,2)
makeCacheMatrix$set(y)
makeCacheMatrix(x)
cacheSolve(x)
k <- makeCacheMatrix(x)
cacheSolve(k)
cacheSolve(k)
x<-
NULL
x
makeCacheMatrix(x)
k<-makeCacheMatrix(x)
k
k$set(matrix(1:4,2,2))
k$get()
cacheSolve(k)
